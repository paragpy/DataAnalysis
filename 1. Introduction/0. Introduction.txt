ExecStartPre=/bin/bash -c 'echo "=== DEBUG INFO ===" && pwd && echo "User: $(whoami)" && echo "Path: $PATH" && ls -la /home/emerg1/shivam/ && echo "Python location:" && which python3'



I'll help you deploy your Flask application on a Red Hat Linux server. Here's a comprehensive guide with production-ready setup using Gunicorn and Nginx.

## Deployment Steps for Flask on Red Hat Linux

### 1. **Prepare Your Application**

First, verify your Flask app structure:

```bash
# Check your app.py
cat /home/emerg1/shivam/app.py
```

Ensure your app has the standard Flask structure:
```python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Hello World!'

if __name__ == '__main__':
    app.run()
```

### 2. **Install System Dependencies**

```bash
# Update system
sudo dnf update -y

# Install Python and development tools
sudo dnf install python3 python3-pip python3-devel gcc -y

# Install Nginx
sudo dnf install nginx -y

# Install supervisord (for process management)
sudo dnf install supervisor -y
```

### 3. **Set Up Python Environment**

```bash
# Activate your existing virtual environment
source /home/emerg1/.venv/bin/activate

# Install production dependencies
pip install gunicorn flask

# Create requirements.txt if you don't have one
pip freeze > /home/emerg1/shivam/requirements.txt
```

### 4. **Create Gunicorn Configuration**

Create a Gunicorn configuration file:

```bash
sudo nano /home/emerg1/shivam/gunicorn_config.py
```

Add this content:

```python
# Gunicorn configuration file
import multiprocessing

# Server socket
bind = "127.0.0.1:8000"
backlog = 2048

# Worker processes
workers = multiprocessing.cpu_count() * 2 + 1
worker_class = 'sync'
worker_connections = 1000
timeout = 30
keepalive = 2

# Logging
accesslog = '/var/log/gunicorn/access.log'
errorlog = '/var/log/gunicorn/error.log'
loglevel = 'info'

# Process naming
proc_name = 'flask_app'

# Server mechanics
daemon = False
pidfile = '/var/run/gunicorn.pid'
user = 'emerg1'
group = 'emerg1'
```

Create log directory:

```bash
sudo mkdir -p /var/log/gunicorn
sudo chown emerg1:emerg1 /var/log/gunicorn
```

### 5. **Create Systemd Service**

Create a systemd service file for automatic startup:

```bash
sudo nano /etc/systemd/system/flask-app.service
```

Add this content:

```ini
[Unit]
Description=Flask Application with Gunicorn
After=network.target

[Service]
User=emerg1
Group=emerg1
WorkingDirectory=/home/emerg1/shivam
Environment="PATH=/home/emerg1/.venv/bin"
ExecStart=/home/emerg1/.venv/bin/gunicorn --config /home/emerg1/shivam/gunicorn_config.py app:app

Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
```

Enable and start the service:

```bash
sudo systemctl daemon-reload
sudo systemctl enable flask-app
sudo systemctl start flask-app
sudo systemctl status flask-app
```

### 6. **Configure Nginx as Reverse Proxy**

Create Nginx configuration:

```bash
sudo nano /etc/nginx/conf.d/flask-app.conf
```

Add this content:

```nginx
server {
    listen 80;
    server_name your_domain.com;  # Replace with your domain or server IP

    access_log /var/log/nginx/flask-app-access.log;
    error_log /var/log/nginx/flask-app-error.log;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Static files (if you have them)
    location /static {
        alias /home/emerg1/shivam/static;
        expires 30d;
    }
}
```

Test and restart Nginx:

```bash
# Test Nginx configuration
sudo nginx -t

# Enable and start Nginx
sudo systemctl enable nginx
sudo systemctl restart nginx
```

### 7. **Configure Firewall**

```bash
# Open HTTP port
sudo firewall-cmd --permanent --add-service=http

# Open HTTPS port (for future SSL)
sudo firewall-cmd --permanent --add-service=https

# Reload firewall
sudo firewall-cmd --reload
```

### 8. **Set SELinux Permissions** (Red Hat specific)

```bash
# Allow Nginx to connect to network
sudo setsebool -P httpd_can_network_connect 1

# Set proper context for your app directory
sudo semanage fcontext -a -t httpd_sys_content_t "/home/emerg1/shivam(/.*)?"
sudo restorecon -Rv /home/emerg1/shivam
```

### 9. **Test Your Deployment**

```bash
# Check if Gunicorn is running
sudo systemctl status flask-app

# Check if Nginx is running
sudo systemctl status nginx

# Test locally
curl http://localhost

# Check logs if there are issues
sudo journalctl -u flask-app -f
sudo tail -f /var/log/nginx/flask-app-error.log
sudo tail -f /var/log/gunicorn/error.log
```

### 10. **Useful Management Commands**

```bash
# Restart your Flask app
sudo systemctl restart flask-app

# View Flask app logs
sudo journalctl -u flask-app -n 50

# Restart Nginx
sudo systemctl restart nginx

# Check all service statuses
sudo systemctl status flask-app nginx
```

## Optional: SSL/HTTPS Setup with Let's Encrypt

```bash
# Install Certbot
sudo dnf install certbot python3-certbot-nginx -y

# Obtain SSL certificate
sudo certbot --nginx -d your_domain.com

# Auto-renewal is set up automatically
sudo systemctl status certbot-renew.timer
```

## Troubleshooting Common Issues

**If the app doesn't start:**
```bash
# Check for port conflicts
sudo netstat -tulpn | grep :8000

# Verify Python path
which python3
/home/emerg1/.venv/bin/python --version
```

**If you get permission errors:**
```bash
# Fix ownership
sudo chown -R emerg1:emerg1 /home/emerg1/shivam

# Check file permissions
chmod +x /home/emerg1/shivam/app.py
```

This setup gives you a production-ready Flask deployment with automatic restart, logging, and proper security configurations for Red Hat Linux!
