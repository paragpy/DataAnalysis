Perfect! Here's the complete deployment guide using Gunicorn with Unix sockets for your Red Hat server. This is a more robust production setup.

## Complete Red Hat Flask Deployment with Gunicorn Socket

### Step 1: Prepare Your Application

```bash
# Navigate to your app directory
cd /home/emerg1/shivam

# Activate virtual environment
source /home/emerg1/.venv/bin/activate

# Install required packages
pip install gunicorn flask
pip freeze > requirements.txt
```

### Step 2: Verify Your Flask App Structure

Make sure your `app.py` has the Flask application object:

```bash
cat /home/emerg1/shivam/app.py
```

It should have something like:

```python
from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return 'Hello World!'

# For Gunicorn, remove or comment out:
# if __name__ == '__main__':
#     app.run()
```

### Step 3: Create Gunicorn Configuration File

```bash
nano /home/emerg1/shivam/gunicorn_config.py
```

Add this content:

```python
# Gunicorn configuration file
import multiprocessing

# Socket binding
bind = "unix:/run/gunicorn/gunicorn.sock"

# Worker processes
workers = multiprocessing.cpu_count() * 2 + 1
worker_class = 'sync'
worker_connections = 1000
max_requests = 100
max_requests_jitter = 50
timeout = 300
keepalive = 3

# Preload app for better performance
preload_app = True

# Logging
accesslog = '-'  # Log to stdout
errorlog = '-'   # Log to stderr
loglevel = 'info'

# Process naming
proc_name = 'flask_app'

# Server mechanics
daemon = False
```

### Step 4: Create Gunicorn Socket File

```bash
sudo nano /etc/systemd/system/gunicorn.socket
```

Add this content (adjusted for your user):

```ini
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn/gunicorn.sock
SocketUser=emerg1
SocketGroup=nginx
SocketMode=0660

[Install]
WantedBy=sockets.target
```

### Step 5: Create Gunicorn Service File

```bash
sudo nano /etc/systemd/system/gunicorn.service
```

Add this content:

```ini
[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
Type=notify
User=emerg1
Group=nginx
WorkingDirectory=/home/emerg1/shivam

# systemd creates /run/gunicorn with correct perms
RuntimeDirectory=gunicorn

# Environment
Environment="PATH=/home/emerg1/.venv/bin:/usr/local/bin:/usr/bin"
Environment="PYTHONPATH=/home/emerg1/shivam"

# Start Gunicorn
ExecStart=/home/emerg1/.venv/bin/gunicorn \
          --config /home/emerg1/shivam/gunicorn_config.py \
          app:app

# Logging
StandardOutput=journal
StandardError=journal

# Restart policy
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
```

### Step 6: Add User to Nginx Group

```bash
# Add emerg1 user to nginx group
sudo usermod -a -G nginx emerg1

# Verify group membership
groups emerg1

# You may need to logout and login for group changes to take effect
```

### Step 7: Start and Enable Gunicorn Socket

```bash
# Stop any existing flask-app service
sudo systemctl stop flask-app 2>/dev/null || true
sudo systemctl disable flask-app 2>/dev/null || true

# Reload systemd
sudo systemctl daemon-reload

# Start and enable the socket
sudo systemctl start gunicorn.socket
sudo systemctl enable gunicorn.socket

# Check socket status
sudo systemctl status gunicorn.socket

# Verify socket file was created
sudo ls -la /run/gunicorn/
```

### Step 8: Test Socket Activation

```bash
# Check if gunicorn service is inactive (normal before first request)
sudo systemctl status gunicorn

# Test the socket with curl (this will activate the service)
curl --unix-socket /run/gunicorn/gunicorn.sock http://localhost/

# Now check gunicorn service status (should be active)
sudo systemctl status gunicorn

# Watch logs in real-time
sudo journalctl -u gunicorn -f
```

### Step 9: Configure Nginx

```bash
sudo nano /etc/nginx/conf.d/flask-app.conf
```

Add this configuration:

```nginx
upstream flask_app {
    server unix:/run/gunicorn/gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name _;  # Replace with your domain or server IP

    client_max_body_size 4G;
    keepalive_timeout 5;

    access_log /var/log/nginx/flask-app-access.log;
    error_log /var/log/nginx/flask-app-error.log;

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_buffering off;

        proxy_pass http://flask_app;
    }

    # Static files (if you have them)
    location /static {
        alias /home/emerg1/shivam/static;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }

    # Media files (if you have them)
    location /media {
        alias /home/emerg1/shivam/media;
        expires 30d;
        add_header Cache-Control "public, immutable";
    }
}
```

### Step 10: Test and Start Nginx

```bash
# Test Nginx configuration
sudo nginx -t

# If test passes, restart Nginx
sudo systemctl restart nginx
sudo systemctl enable nginx

# Check Nginx status
sudo systemctl status nginx
```

### Step 11: Configure Firewall

```bash
# Allow HTTP and HTTPS
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --reload

# Verify
sudo firewall-cmd --list-all
```

### Step 12: Configure SELinux (Red Hat Specific)

```bash
# Allow Nginx to connect to the socket
sudo setsebool -P httpd_can_network_connect 1

# Set proper SELinux context for socket directory
sudo semanage fcontext -a -t httpd_sys_rw_content_t "/run/gunicorn(/.*)?"
sudo restorecon -Rv /run/gunicorn

# Set context for application directory
sudo semanage fcontext -a -t httpd_sys_content_t "/home/emerg1/shivam(/.*)?"
sudo restorecon -Rv /home/emerg1/shivam

# If you get "command not found" for semanage, install it:
# sudo dnf install policycoreutils-python-utils -y
```

### Step 13: Test Your Deployment

```bash
# Test via Unix socket directly
curl --unix-socket /run/gunicorn/gunicorn.sock http://localhost/

# Test via Nginx (localhost)
curl http://localhost

# Test from external
curl http://YOUR_SERVER_IP

# Or open in browser:
# http://YOUR_SERVER_IP
```

### Step 14: Monitor and Debug

```bash
# View all logs in real-time
sudo journalctl -u gunicorn -u nginx -f

# Check socket status
sudo systemctl status gunicorn.socket

# Check service status
sudo systemctl status gunicorn

# Check Nginx status
sudo systemctl status nginx

# View recent Gunicorn logs
sudo journalctl -u gunicorn -n 50 --no-pager

# View Nginx error logs
sudo tail -f /var/log/nginx/flask-app-error.log

# View Nginx access logs
sudo tail -f /var/log/nginx/flask-app-access.log
```

## Useful Management Commands

```bash
# Restart Gunicorn
sudo systemctl restart gunicorn

# Restart socket (rarely needed)
sudo systemctl restart gunicorn.socket

# Restart Nginx
sudo systemctl restart nginx

# Reload Gunicorn (graceful restart without dropping connections)
sudo systemctl reload gunicorn

# Stop everything
sudo systemctl stop gunicorn nginx

# Start everything
sudo systemctl start gunicorn.socket nginx

# Check if services are enabled
sudo systemctl is-enabled gunicorn.socket gunicorn nginx
```

## Troubleshooting Commands

```bash
# Check if socket file exists
ls -la /run/gunicorn/

# Check socket permissions
sudo stat /run/gunicorn/gunicorn.sock

# Test if Nginx can reach the socket
sudo -u nginx curl --unix-socket /run/gunicorn/gunicorn.sock http://localhost/

# Check for SELinux denials
sudo ausearch -m avc -ts recent

# Verify user groups
id emerg1
id nginx

# Check listening sockets
sudo ss -xl | grep gunicorn
```

## Performance Tuning

Edit the gunicorn_config.py for better performance:

```bash
nano /home/emerg1/shivam/gunicorn_config.py
```

```python
import multiprocessing

bind = "unix:/run/gunicorn/gunicorn.sock"

# Adjust workers based on your needs
# Formula: (2 x $num_cores) + 1
workers = multiprocessing.cpu_count() * 2 + 1

# For CPU-bound apps, use sync
# For I/O-bound apps, consider gevent or eventlet
worker_class = 'sync'

# Restart workers after serving this many requests (prevents memory leaks)
max_requests = 1000
max_requests_jitter = 50

# Timeout for workers
timeout = 300

# Keep-alive
keepalive = 5

# Preload app for faster worker spawning
preload_app = True

# Logging
accesslog = '-'
errorlog = '-'
loglevel = 'info'

# Graceful timeout
graceful_timeout = 30
```

After making changes:

```bash
sudo systemctl daemon-reload
sudo systemctl restart gunicorn
```

Your Flask application is now deployed with a production-ready setup using Gunicorn and Unix sockets! ðŸš€




sudo nano /etc/systemd/system/nginx.service

[Unit]
Description=The nginx HTTP and reverse proxy server
After=network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/bin/rm -f /run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/bin/kill -s HUP $MAINPID
KillSignal=SIGQUIT
TimeoutStopSec=5
KillMode=mixed
PrivateTmp=true

[Install]
WantedBy=multi-user.target

sudo systemctl daemon-reload
sudo systemctl start nginx
sudo systemctl enable nginx
sudo systemctl status nginx
