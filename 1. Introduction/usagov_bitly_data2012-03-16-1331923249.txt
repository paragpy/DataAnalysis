Perfect! Let's do a clean, simple deployment with uWSGI and Nginx. This is often more straightforward than Gunicorn with sockets.

## Complete uWSGI + Nginx Deployment Guide for Red Hat 8

### Step 1: Clean Up Previous Setup

```bash
# Stop and disable gunicorn services
sudo systemctl stop gunicorn.service gunicorn.socket 2>/dev/null || true
sudo systemctl disable gunicorn.service gunicorn.socket 2>/dev/null || true

# Remove gunicorn socket directory
sudo rm -rf /run/gunicorn

# Remove old service files (optional, for clean slate)
sudo rm -f /etc/systemd/system/gunicorn.service
sudo rm -f /etc/systemd/system/gunicorn.socket

sudo systemctl daemon-reload
```

### Step 2: Install uWSGI

```bash
# Activate your virtual environment
cd /home/emerg1/shivam
source /home/emerg1/.venv/bin/activate

# Install uWSGI
pip install uwsgi flask

# Verify installation
uwsgi --version
```

### Step 3: Create uWSGI Configuration File

```bash
nano /home/emerg1/shivam/uwsgi.ini
```

Add this content:

```ini
[uwsgi]
# Application settings
module = app:app
chdir = /home/emerg1/shivam

# Process management
master = true
processes = 4
threads = 2

# Socket settings
socket = /tmp/flask-app.sock
chmod-socket = 666
vacuum = true
die-on-term = true

# Logging
logto = /home/emerg1/shivam/logs/uwsgi.log
log-maxsize = 10000000
```

### Step 4: Create Log Directory

```bash
mkdir -p /home/emerg1/shivam/logs
```

### Step 5: Test uWSGI Manually

```bash
cd /home/emerg1/shivam
source /home/emerg1/.venv/bin/activate

# Test uWSGI
uwsgi --ini uwsgi.ini

# Press Ctrl+C to stop after verifying it starts without errors
```

### Step 6: Create uWSGI systemd Service

```bash
sudo nano /etc/systemd/system/flask-uwsgi.service
```

Add this content:

```ini
[Unit]
Description=uWSGI instance to serve Flask app
After=network.target

[Service]
User=emerg1
Group=nginx
WorkingDirectory=/home/emerg1/shivam
Environment="PATH=/home/emerg1/.venv/bin"

ExecStart=/home/emerg1/.venv/bin/uwsgi --ini /home/emerg1/shivam/uwsgi.ini

Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
```

### Step 7: Start and Enable uWSGI Service

```bash
# Reload systemd
sudo systemctl daemon-reload

# Start uWSGI service
sudo systemctl start flask-uwsgi

# Check status
sudo systemctl status flask-uwsgi

# Enable to start on boot
sudo systemctl enable flask-uwsgi

# Verify socket file was created
ls -la /tmp/flask-app.sock
```

### Step 8: Create/Update Nginx Configuration

```bash
sudo nano /etc/nginx/conf.d/flask-app.conf
```

Add this content:

```nginx
server {
    listen 80;
    server_name 10.198.52.64;  # Your server IP or domain

    access_log /var/log/nginx/flask-app-access.log;
    error_log /var/log/nginx/flask-app-error.log;

    location / {
        include uwsgi_params;
        uwsgi_pass unix:/tmp/flask-app.sock;
        
        # Timeouts
        uwsgi_read_timeout 300;
        uwsgi_send_timeout 300;
    }

    # Static files (if you have them)
    location /static {
        alias /home/emerg1/shivam/static;
        expires 30d;
    }
}
```

### Step 9: Create Nginx Service File (if needed)

```bash
sudo nano /usr/lib/systemd/system/nginx.service
```

Add this:

```ini
[Unit]
Description=The nginx HTTP and reverse proxy server
After=network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target

[Service]
Type=forking
PIDFile=/var/run/nginx.pid
ExecStartPre=/usr/bin/rm -f /var/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
KillSignal=SIGQUIT
TimeoutStopSec=5
KillMode=mixed
PrivateTmp=true

[Install]
WantedBy=multi-user.target
```

### Step 10: Fix Nginx Main Config for IPv6

```bash
sudo nano /etc/nginx/nginx.conf
```

Find and comment out any IPv6 listen directives:

```nginx
# Comment out or remove this line:
# listen       [::]:80 default_server;
```

Or run this command to do it automatically:

```bash
sudo sed -i 's/^\s*listen\s*\[::\]/#&/' /etc/nginx/nginx.conf
```

### Step 11: Start Nginx

```bash
# Reload systemd
sudo systemctl daemon-reload

# Test nginx configuration
sudo nginx -t

# Start and enable nginx
sudo systemctl start nginx
sudo systemctl enable nginx

# Check status
sudo systemctl status nginx
```

### Step 12: Configure Firewall

```bash
# Allow HTTP traffic
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --reload

# Verify
sudo firewall-cmd --list-all
```

### Step 13: Configure SELinux Permissions

```bash
# Allow Nginx to connect to uWSGI socket
sudo setsebool -P httpd_can_network_connect 1

# Set proper context for socket file
sudo chcon -t httpd_sys_rw_content_t /tmp/flask-app.sock

# Set context for app directory
sudo semanage fcontext -a -t httpd_sys_content_t "/home/emerg1/shivam(/.*)?"
sudo restorecon -Rv /home/emerg1/shivam
```

### Step 14: Add User to Nginx Group

```bash
sudo usermod -a -G nginx emerg1

# Verify
groups emerg1
```

### Step 15: Test Your Deployment

```bash
# Check both services are running
sudo systemctl status flask-uwsgi nginx

# Test locally
curl http://localhost

# Test from external
curl http://10.198.52.64

# Check listening ports
sudo ss -tlnp | grep :80

# Check socket
ls -la /tmp/flask-app.sock
```

### Step 16: View Logs

```bash
# uWSGI logs
tail -f /home/emerg1/shivam/logs/uwsgi.log

# Nginx error logs
sudo tail -f /var/log/nginx/flask-app-error.log

# Nginx access logs
sudo tail -f /var/log/nginx/flask-app-access.log

# Systemd logs
sudo journalctl -u flask-uwsgi -f
```

## Useful Management Commands

```bash
# Restart uWSGI
sudo systemctl restart flask-uwsgi

# Restart Nginx
sudo systemctl restart nginx

# Check status of both
sudo systemctl status flask-uwsgi nginx

# View recent logs
sudo journalctl -u flask-uwsgi -n 50

# Reload uWSGI (graceful restart)
sudo systemctl reload flask-uwsgi

# Stop everything
sudo systemctl stop flask-uwsgi nginx

# Start everything
sudo systemctl start flask-uwsgi nginx
```

## Troubleshooting Commands

```bash
# If uWSGI fails to start
sudo journalctl -u flask-uwsgi -n 100 --no-pager

# Test uWSGI manually
cd /home/emerg1/shivam
source /home/emerg1/.venv/bin/activate
uwsgi --ini uwsgi.ini

# Check socket permissions
ls -la /tmp/flask-app.sock

# Check if Nginx can access the socket
sudo -u nginx test -r /tmp/flask-app.sock && echo "OK" || echo "FAIL"

# Check SELinux denials
sudo ausearch -m avc -ts recent
```

## Production Optimization (Optional)

For better performance, update `uwsgi.ini`:

```bash
nano /home/emerg1/shivam/uwsgi.ini
```

```ini
[uwsgi]
# Application settings
module = app:app
chdir = /home/emerg1/shivam
virtualenv = /home/emerg1/.venv

# Process management
master = true
processes = 4
threads = 2
enable-threads = true

# Socket settings
socket = /tmp/flask-app.sock
chmod-socket = 666
vacuum = true
die-on-term = true

# Performance tuning
max-requests = 1000
max-requests-delta = 100
harakiri = 300
buffer-size = 32768

# Logging
logto = /home/emerg1/shivam/logs/uwsgi.log
log-maxsize = 10000000
log-date = true

# Stats (optional - for monitoring)
# stats = /tmp/uwsgi-stats.sock
```

Then restart:

```bash
sudo systemctl restart flask-uwsgi
```

This setup is much simpler than Gunicorn with sockets and should work reliably on Red Hat 8! Let me know how it goes.